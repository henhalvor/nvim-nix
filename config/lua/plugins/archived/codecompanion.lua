return {}
-- return {
-- 	{
-- 		"olimorris/codecompanion.nvim",
-- 		dependencies = {
-- 			"nvim-lua/plenary.nvim",
-- 			"nvim-treesitter/nvim-treesitter",
-- 			"github/copilot.vim",
-- 			"j-hui/fidget.nvim",
-- 		},
-- 		enabled = true,
-- 		opts = {
-- 			adapters = {
-- 				copilot = function()
-- 					return require("codecompanion.adapters").extend("copilot", {
-- 						schema = {
-- 							model = {
-- 								-- default = "gemini-2.5-pro",
-- 								default = "gpt-4o",
-- 								-- default = "claude-sonnet-4",
-- 							},
-- 						},
-- 						-- formatted_name = "Gemini 2.5 Pro", -- Add this line
-- 						formatted_name = "Gpt-4o", -- Add this line
-- 						-- formatted_name = "Claude 4 Sonnet", -- Add this line
-- 					})
-- 				end,
-- 			},
--
-- 			prompt_library = {
-- 				["Code Review (Selection)"] = {
-- 					strategy = "chat",
-- 					description = "Review visually selected code",
-- 					opts = {
-- 						modes = { "v" }, -- IMPORTANT: Only for Visual mode
-- 						short_name = "cr_selection",
-- 						adapter = "copilot",
-- 						auto_submit = true,
-- 						stop_context_insertion = true,
-- 					},
-- 					prompts = {
-- 						{
-- 							role = "system",
-- 							content = function(context)
-- 								-- Correctly gets only the selected code
-- 								local selected_code = require("codecompanion.helpers.actions").get_code(
-- 									context.start_line,
-- 									context.end_line
-- 								)
-- 								return string.format(
-- 									"You are an expert code reviewer for %s. Review the following code selection:\n\n```%s\n%s\n```",
-- 									context.filetype,
-- 									context.filetype,
-- 									selected_code
-- 								)
-- 							end,
-- 						},
-- 						-- Now, add the same sequence of detailed instructions
-- 						{
-- 							role = "user",
-- 							content = "Please analyze the code for:\n\n1. **Code Quality**: Structure, readability, maintainability\n2. **Logic & Correctness**: Potential bugs, edge cases\n3. **Best Practices**: Language-specific conventions\n4. **Initial Observations**: What stands out immediately?\n\nProvide detailed feedback with specific line references where applicable.",
-- 							opts = { auto_submit = true },
-- 						},
-- 						{
-- 							role = "user",
-- 							content = "Now let's dive deeper into security and performance:\n\n1. **Security Analysis**: Look for vulnerabilities, input validation issues, etc.\n2. **Performance Review**: Identify bottlenecks, inefficient algorithms, etc.\n3. **Error Handling**: Evaluate exception handling and edge case management.\n4. **Dependencies**: Comment on external library usage and potential risks.\n\nProvide specific recommendations for each area.",
-- 							opts = { auto_submit = true },
-- 						},
-- 						{
-- 							role = "user",
-- 							content = "Based on your analysis, please provide:\n\n1. **Priority Rankings**: Rate issues from critical to minor\n2. **Concrete Solutions**: Specific code examples for improvements\n3. **Refactoring Opportunities**: Suggest better patterns or structures\n4. **Testing Recommendations**: What should be tested and how?\n\nFocus on actionable feedback that can be implemented immediately.",
-- 							opts = { auto_submit = true },
-- 						},
-- 						{
-- 							role = "user",
-- 							content = "Finally, provide a concise summary:\n\n1. **Overall Assessment**: Rate code quality (1-10) with justification\n2. **Top 3 Action Items**: Most important changes\n3. **Strengths**: What the code does well\n4. **Long-term Recommendations**: Architectural suggestions.\n\nKeep this summary focused and actionable.",
-- 							opts = { auto_submit = false }, -- End of the automated chain
-- 						},
-- 					},
-- 				},
-- 				["Review Full Buffer"] = {
-- 					strategy = "chat",
-- 					description = "Review the entire current file",
-- 					opts = {
-- 						modes = { "n" }, -- IMPORTANT: Only for Normal mode
-- 						short_name = "cr_file",
-- 						adapter = "copilot",
-- 						auto_submit = true,
-- 					},
-- 					prompts = {
-- 						{
-- 							role = "system",
-- 							content = function(context)
-- 								local end_line = vim.api.nvim_buf_line_count(context.bufnr)
-- 								-- Corrected call: removed the third argument (bufnr)
-- 								local buffer_content = require("codecompanion.helpers.actions").get_code(1, end_line)
-- 								return string.format(
-- 									"You are an expert code reviewer for %s. Review the following file content:\n\n```%s\n%s\n```",
-- 									context.filetype,
-- 									context.filetype,
-- 									buffer_content
-- 								)
-- 							end,
-- 						},
-- 						{
-- 							role = "user",
-- 							content = "Please analyze the code for:\n\n1. **Code Quality**: Structure, readability, maintainability\n2. **Logic & Correctness**: Potential bugs, edge cases\n3. **Best Practices**: Language-specific conventions\n4. **Initial Observations**: What stands out immediately?\n\nProvide detailed feedback with specific line references where applicable.",
-- 							opts = { auto_submit = true },
-- 						},
-- 						{
-- 							role = "user",
-- 							content = "Now let's dive deeper into security and performance:\n\n1. **Security Analysis**: Look for vulnerabilities, input validation issues, etc.\n2. **Performance Review**: Identify bottlenecks, inefficient algorithms, etc.\n3. **Error Handling**: Evaluate exception handling and edge case management.\n4. **Dependencies**: Comment on external library usage and potential risks.\n\nProvide specific recommendations for each area.",
-- 							opts = { auto_submit = true },
-- 						},
-- 						{
-- 							role = "user",
-- 							content = "Based on your analysis, please provide:\n\n1. **Priority Rankings**: Rate issues from critical to minor\n2. **Concrete Solutions**: Specific code examples for improvements\n3. **Refactoring Opportunities**: Suggest better patterns or structures\n4. **Testing Recommendations**: What should be tested and how?\n\nFocus on actionable feedback that can be implemented immediately.",
-- 							opts = { auto_submit = true },
-- 						},
-- 						{
-- 							role = "user",
-- 							content = "Finally, provide a concise summary:\n\n1. **Overall Assessment**: Rate code quality (1-10) with justification\n2. **Top 3 Action Items**: Most important changes\n3. **Strengths**: What the code does well\n4. **Long-term Recommendations**: Architectural suggestions.\n\nKeep this summary focused and actionable.",
-- 							opts = { auto_submit = false }, -- End of the automated chain
-- 						},
-- 					},
-- 				},
-- 			},
-- 			display = {
-- 				chat = {
-- 					intro_message = "Welcome to CodeCompanion âœ¨! Press ? for options",
-- 					show_header_separator = true, -- Show header separators in the chat buffer? Set this to false if you're using an external markdown formatting plugin
-- 					auto_scroll = true,
-- 					-- show_settings = true, -- This displays the model being used
-- 					show_token_count = true, -- Show token usage
-- 					show_references = true, -- Show references from slash commands
-- 					token_count = function(tokens, adapter)
-- 						return string.format("%s (%d tokens)", adapter.formatted_name, tokens)
-- 					end,
-- 					separator = "â”€",
-- 					window = {
-- 						layout = "vertical",
-- 						border = "rounded", -- Better looking border
-- 						height = 0.8,
-- 						width = 0.45,
-- 					},
-- 					roles = {
-- 						-- In roles.llm (line 48)
-- 						llm = function(adapter)
-- 							local model = adapter.formatted_model or adapter.formatted_name
-- 							return "CodeCompanion----- (" .. model .. ")"
-- 						end,
-- 						user = "henhalvor",
-- 					},
-- 				},
-- 			},
-- 			strategies = {
-- 				chat = {
-- 					adapter = "copilot",
-- 					roles = {
-- 						---The header name for the LLM's messages
-- 						---@type string|fun(adapter: CodeCompanion.Adapter): string
-- 						llm = function(adapter)
-- 							-- return string.format("ðŸ¤– %s ", adapter.formatted_name) -- More descriptive
-- 							return string.format("ðŸ¤– - LLM") -- Simplified for cleaner display
-- 						end,
--
-- 						---The header name for your messages
-- 						---@type string
-- 						user = "ðŸ‘¤ - henhalvor",
-- 					},
-- 					opts = {
-- 						completion_provider = "blink", -- blink|cmp|coc|default
-- 					},
-- 					keymaps = {
-- 						close = {
-- 							modes = {
-- 								n = "q",
-- 							},
-- 							index = 3,
-- 							callback = "keymaps.close",
-- 							description = "Close Chat",
-- 						},
-- 						stop = {
-- 							modes = {
-- 								n = "<C-c>",
-- 							},
-- 							index = 4,
-- 							callback = "keymaps.stop",
-- 							description = "Stop Request",
-- 						},
-- 					},
-- 				},
-- 			},
-- 			inline = {
-- 				adapter = "copilot",
-- 			},
-- 			-- ðŸ”¥ Crucial: Register MCP Extension in `opts`
-- 			extensions = {
-- 				mcphub = {
-- 					callback = "mcphub.extensions.codecompanion",
-- 					opts = {
-- 						show_result_in_chat = true,
-- 						make_vars = true,
-- 						make_slash_commands = true, -- Enables `/` slash commands
-- 						auto_register_servers = true, -- Automatically register servers from MCP Hub
-- 					},
-- 				},
-- 			},
-- 		},
--
-- 		keys = {
-- 			{
-- 				"<leader>ac",
-- 				"<cmd>CodeCompanionActions<cr>",
-- 				mode = { "n", "v" },
-- 				noremap = true,
-- 				silent = true,
-- 				desc = "CodeCompanion actions",
-- 			},
-- 			{
-- 				"<leader>aa",
-- 				"<cmd>CodeCompanionChat Toggle<cr>",
-- 				mode = { "n", "v" },
-- 				noremap = true,
-- 				silent = true,
-- 				desc = "CodeCompanion chat",
-- 			},
-- 			{
-- 				"<leader>ad",
-- 				"<cmd>CodeCompanionChat Add<cr>",
-- 				mode = "v",
-- 				noremap = true,
-- 				silent = true,
-- 				desc = "CodeCompanion add to chat",
-- 			},
-- 		},
-- 		config = function(_, opts)
-- 			require("codecompanion").setup(opts)
--
-- 			local progress = require("fidget.progress")
-- 			local handles = {}
-- 			local group = vim.api.nvim_create_augroup("CodeCompanionFidget", {})
--
-- 			vim.api.nvim_create_autocmd("User", {
-- 				pattern = "CodeCompanionRequestStarted",
-- 				group = group,
-- 				callback = function(e)
-- 					handles[e.data.id] = progress.handle.create({
-- 						title = "CodeCompanion",
-- 						message = "Thinking...",
-- 						lsp_client = { name = e.data.adapter.formatted_name },
-- 					})
-- 				end,
-- 			})
--
-- 			vim.api.nvim_create_autocmd("User", {
-- 				pattern = "CodeCompanionRequestFinished",
-- 				group = group,
-- 				callback = function(e)
-- 					local h = handles[e.data.id]
-- 					if h then
-- 						h.message = e.data.status == "success" and "Done" or "Failed"
-- 						h:finish()
-- 						handles[e.data.id] = nil
-- 					end
-- 				end,
-- 			})
-- 		end,
-- 	},
--
-- 	--
-- 	-- Markdown rendering
-- 	--
-- 	{
-- 		"MeanderingProgrammer/render-markdown.nvim",
-- 		ft = { "markdown", "codecompanion" },
-- 	},
--
-- 	--
-- 	-- AutoComplete
-- 	--
-- 	{
-- 		"saghen/blink.cmp",
-- 		dependencies = { "olimorris/codecompanion.nvim", "saghen/blink.compat" },
-- 		event = "InsertEnter",
-- 		opts = {
-- 			enabled = function()
-- 				return vim.bo.buftype ~= "prompt" and vim.b.completion ~= false
-- 			end,
-- 			completion = {
-- 				accept = {
-- 					auto_brackets = {
-- 						kind_resolution = {
-- 							blocked_filetypes = { "typescriptreact", "javascriptreact", "vue", "codecompanion" },
-- 						},
-- 					},
-- 				},
-- 			},
-- 			sources = {
-- 				per_filetype = {
-- 					codecompanion = { "codecompanion" },
-- 				},
-- 			},
-- 		},
-- 	},
--
-- 	--
-- 	-- MCP Hub
-- 	--
-- 	{
-- 		"ravitemer/mcphub.nvim",
-- 		build = "npm install -g mcp-hub@latest",
-- 		config = function()
-- 			require("mcphub").setup()
-- 		end,
-- 	},
-- }
